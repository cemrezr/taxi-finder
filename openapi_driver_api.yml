openapi: 3.0.0
info:
  title: Driver Location API
  description: API for managing driver locations
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /drivers:
    get:
      summary: Get all drivers
      description: Returns a list of all drivers.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Driver'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /drivers/{id}:
    get:
      summary: Get driver by ID
      description: Returns the driver with the specified ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the driver to get
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'
        '404':
          description: Driver not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /upload-drivers:
    post:
      summary: Upload drivers from CSV
      description: Uploads driver locations from a CSV file.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /match:
    post:
      summary: Match customer with nearest driver
      description: Matches the customer's location with the nearest driver's location.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeoJSON'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  driver:
                    $ref: '#/components/schemas/Driver'
                  distance:
                    type: number
                    format: float
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
components:
  schemas:
    Driver:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: floatopenapi: 3.0.0
info:
  title: Driver Location API
  description: API for managing driver locations
  version: 1.0.0
servers:
  - url: http://localhost:8080
paths:
  /drivers:
    get:
      summary: Get all drivers
      description: Returns a list of all drivers.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Driver'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /drivers/{id}:
    get:
      summary: Get driver by ID
      description: Returns the driver with the specified ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the driver to get
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'
        '404':
          description: Driver not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /upload-drivers:
    post:
      summary: Upload drivers from CSV
      description: Uploads driver locations from a CSV file.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /match:
    post:
      summary: Match customer with nearest driver
      description: Matches the customer's location with the nearest driver's location.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeoJSON'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  driver:
                    $ref: '#/components/schemas/Driver'
                  distance:
                    type: number
                    format: float
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
components:
  schemas:
    Driver:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
    GeoJSON:
      type: object
      properties:
        type:
          type: string
          enum:
            - Point
        coordinates:
          type: array
          items:
            type: number
          minItems: 2
          maxItems: 2

    GeoJSON:
      type: object
      properties:
        type:
          type: string
          enum:
            - Point
        coordinates:
          type: array
          items:
            type: number
          minItems: 2
          maxItems: 2
